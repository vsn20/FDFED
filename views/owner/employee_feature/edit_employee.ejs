<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Employee - ElectroLand</title>
  <link rel="stylesheet" href="/styles.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      background: #f5f6fa;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .container {
      margin-top: 90px;
      display: flex;
      flex: 1;
      gap: 25px;
      padding: 0 20px !important;
      max-width: 100%;
    }

    .content-area {
      background: #ffffff;
      border-radius: 15px;
      padding: 25px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      flex: 1;
    }

    .content-area h2 {
      color: #2d3436;
      margin-bottom: 20px;
    }

    fieldset {
      border: 1px solid #e6e9f0;
      border-radius: 5px;
      padding: 15px;
      margin-bottom: 20px;
    }

    legend {
      color: #2d3436;
      font-weight: bold;
      padding: 0 10px;
      font-size: 1.2rem;
    }

    .field-group {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
    }

    .field-group > div {
      flex: 1 1 45%;
      min-width: 200px;
    }

    label {
      display: block;
      margin-bottom: 5px;
      color: #2d3436;
      font-weight: 500;
    }

    input, select, textarea {
      width: 100%;
      padding: 8px;
      border: 1px solid #e6e9f0;
      border-radius: 5px;
      font-size: 0.9rem;
      background: #fff;
      transition: border-color 0.3s, background-color 0.3s;
    }

    input:disabled, select:disabled, textarea:disabled {
      background: #e6e9f0;
      cursor: not-allowed;
    }

    textarea {
      height: 100px;
      resize: vertical;
    }

    input:focus, select:focus, textarea:focus {
      border-color: #333333;
      outline: none;
    }

    button[type="submit"] {
      display: inline-block;
      padding: 10px 20px;
      background-color: #333333;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    button[type="submit"]:hover:not(:disabled) {
      background-color: #555555;
    }

    button[type="submit"]:disabled {
      background: #6c757d;
      cursor: not-allowed;
    }

    #error-message {
      color: #e74c3c;
      font-size: 0.85rem;
      margin: 10px 0;
      text-align: center;
      display: none;
    }

    .branch-option {
      display: none;
    }

    .branch-option.show {
      display: block;
    }

    #loading {
      text-align: center;
      padding: 20px;
      color: #636e72;
    }

    @media (max-width: 768px) {
      .container {
        flex-direction: column;
        padding: 0 10px !important;
      }

      .content-area {
        padding: 15px;
      }

      .field-group > div {
        flex: 1 1 100%;
      }

      button[type="submit"] {
        width: 100%;
        padding: 8px;
        font-size: 0.85rem;
      }
    }
  </style>
</head>
<body>
  <%- include('../../partials/navbar') %>

  <div class="container">
    <%- include('../../partials/admin_sidebar') %>

    <div class="content-area" id="content">
      <div class="form-container">
        <h2>Edit Employee</h2>
        <div id="loading">Loading employee and branch data...</div>
        <div id="form-container" style="display: none;">
          <form id="edit-employee-form">
            <fieldset>
              <legend>Personal Details</legend>
              <div class="field-group">
                <div>
                  <label for="f_name">First Name</label>
                  <input type="text" id="f_name" name="f_name" required placeholder="Enter first name">
                </div>
                <div>
                  <label for="last_name">Last Name</label>
                  <input type="text" id="last_name" name="last_name" required placeholder="Enter last name">
                </div>
                <div>
                  <label for="role">Role</label>
                  <select id="role" name="role" required>
                    <option value="Sales Manager">Sales Manager</option>
                    <option value="Salesman">Salesman</option>
                  </select>
                </div>
                <div>
                  <label for="bid">Branch</label>
                  <select id="bid" name="bid">
                    <option value="" disabled>Select branch</option>
                    <!-- Options populated via JS -->
                  </select>
                </div>
                <div>
                  <label for="email">Email</label>
                  <input type="email" id="email" name="email" required placeholder="Enter email">
                </div>
                <div>
                  <label for="phone_no">Phone Number</label>
                  <input type="tel" id="phone_no" name="phone_no" placeholder="Enter phone number" pattern="[0-9]{10}">
                </div>
              </div>
            </fieldset>

            <fieldset>
              <legend>Account and Salaries</legend>
              <div class="field-group">
                <div>
                  <label for="acno">Account Number</label>
                  <input type="text" id="acno" name="acno" required placeholder="Enter account number">
                </div>
                <div>
                  <label for="ifsc">IFSC Code</label>
                  <input type="text" id="ifsc" name="ifsc" required placeholder="Enter IFSC code">
                </div>
                <div>
                  <label for="bankname">Bank Name</label>
                  <input type="text" id="bankname" name="bankname" required placeholder="Enter bank name">
                </div>
                <div>
                  <label for="base_salary">Monthly Salary</label>
                  <input type="number" id="base_salary" name="base_salary" required placeholder="Enter monthly salary" step="0.01">
                </div>
                <div>
                  <label for="address">Address</label>
                  <textarea id="address" name="address" placeholder="Enter address"></textarea>
                </div>
              </div>
            </fieldset>

            <fieldset>
              <legend>Status</legend>
              <div class="field-group">
                <div>
                  <label for="status">Status</label>
                  <select id="status" name="status" required>
                    <option value="active">Active</option>
                    <option value="resigned">Resigned</option>
                    <option value="fired">Fired</option>
                  </select>
                </div>
              </div>
            </fieldset>

            <div id="error-message"></div>
            <button type="submit">Update Employee</button>
          </form>
        </div>
        <p id="not-found" style="display: none;">Employee not found.</p>
      </div>
    </div>
  </div>

  <%- include('../../partials/footer') %>

<script>
    const urlParts = window.location.pathname.split('/');
    const e_id = urlParts[urlParts.length - 1];
    const loading = document.getElementById('loading');
    const formContainer = document.getElementById('form-container');
    const notFound = document.getElementById('not-found');
    const form = document.getElementById('edit-employee-form');
    const roleSelect = document.getElementById('role');
    const branchSelect = document.getElementById('bid');
    const statusSelect = document.getElementById('status');
    const email = document.getElementById('email');
    const phone = document.getElementById('phone_no');
    const salaryInput = document.getElementById('base_salary'); // <-- 1. GET THE SALARY ELEMENT
    const errorMessage = document.getElementById('error-message');
    const submitBtn = form.querySelector('button[type="submit"]');

    let allBranches = [];
    let employeeData = null;

    // Real-time Validation Functions
    function validateEmail(el) {
      const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailPattern.test(el.value)) {
        el.style.borderColor = '#e74c3c';
        el.style.backgroundColor = '#fff5f5';
        showFieldError('Please enter a valid email address.');
        return false;
      } else {
        el.style.borderColor = '#27ae60';
        el.style.backgroundColor = '#f0fff4';
        clearFieldError();
        return true;
      }
    }

    function validatePhone(el) {
      const phonePattern = /^[0-9]{10}$/;
      if (el.value && !phonePattern.test(el.value)) {
        el.style.borderColor = '#e74c3c';
        el.style.backgroundColor = '#fff5f5';
        showFieldError('Please enter a valid 10-digit phone number.');
        return false;
      } else {
        el.style.borderColor = '#e6e9f0';
        el.style.backgroundColor = '#fff';
        clearFieldError();
        return true;
      }
    }

    // <-- 2. CREATE THE SALARY VALIDATION FUNCTION
    function validateSalary(el) {
      const salaryValue = parseFloat(el.value);
      if (isNaN(salaryValue) || salaryValue <= 0) {
        el.style.borderColor = '#e74c3c';
        el.style.backgroundColor = '#fff5f5';
        showFieldError('Monthly salary must be a number greater than 0.');
        return false;
      } else {
        el.style.borderColor = '#27ae60';
        el.style.backgroundColor = '#f0fff4';
        clearFieldError();
        return true;
      }
    }

    function showFieldError(msg) {
      errorMessage.textContent = msg;
      errorMessage.style.display = 'block';
    }

    function clearFieldError() {
      errorMessage.textContent = '';
      errorMessage.style.display = 'none';
    }

    // Event Listeners for Real-Time Validation
    email.addEventListener('input', () => validateEmail(email));
    email.addEventListener('blur', () => validateEmail(email));

    phone.addEventListener('blur', () => validatePhone(phone));

    // <-- 3. ADD EVENT LISTENERS FOR SALARY INPUT
    salaryInput.addEventListener('input', () => validateSalary(salaryInput));
    salaryInput.addEventListener('blur', () => validateSalary(salaryInput));

    // Reset styles on focus
    // Add salaryInput to the array of elements to reset
    [email, phone, salaryInput].forEach(el => {
      el.addEventListener('focus', () => {
        el.style.borderColor = '#333333';
        el.style.backgroundColor = '#fff';
        clearFieldError();
      });
    });

    async function loadBranches() {
      try {
        const response = await fetch('/admin/branches/data');
        if (!response.ok) throw new Error('Failed to fetch branches');
        allBranches = await response.json();
        populateBranchSelect();
      } catch (error) {
        console.error('Error loading branches:', error);
      }
    }

    function populateBranchSelect(currentBid = null) {
      branchSelect.innerHTML = '<option value="" disabled>Select branch</option>';
      allBranches.forEach(branch => {
        const option = document.createElement('option');
        option.value = branch.bid;
        option.textContent = `${branch.bid} - ${branch.b_name}`;
        option.className = `branch-option all-branches ${!branch.manager_assigned ? 'unassigned' : ''}`;
        if (currentBid === branch.bid) option.selected = true;
        branchSelect.appendChild(option);
      });
      const nullOption = document.createElement('option');
      nullOption.value = 'null';
      nullOption.textContent = 'Not Assigned';
      nullOption.className = 'branch-option all-branches unassigned';
      if (currentBid === null) nullOption.selected = true;
      branchSelect.appendChild(nullOption);
      updateBranchDropdown();
    }

    function updateBranchDropdown() {
      const options = branchSelect.querySelectorAll('.branch-option');
      options.forEach(option => {
        if (roleSelect.value === 'Sales Manager') {
          if (option.classList.contains('unassigned')) {
            option.classList.add('show');
            option.style.display = 'block';
          } else {
            option.classList.remove('show');
            option.style.display = 'none';
          }
        } else {
          option.classList.add('show');
          option.style.display = 'block';
        }
      });
      if (!branchSelect.querySelector('option.show[selected]')) {
        branchSelect.value = '';
      }
    }

    function toggleFormInputs() {
      const isActive = statusSelect.value === 'active';
      const inputs = form.querySelectorAll('input, select, textarea');
      const statusInput = document.getElementById('status');
      
      inputs.forEach(input => {
        if(input.id !== 'status'){
             input.disabled = !isActive;
        }
      });
      submitBtn.disabled = !isActive;
    }

    async function loadEmployee() {
      try {
        const response = await fetch(`/admin/employee/data/${e_id}`);
        if (!response.ok) {
          if (response.status === 404) {
            loading.style.display = 'none';
            notFound.style.display = 'block';
            return;
          }
          throw new Error('Failed to fetch');
        }
        employeeData = await response.json();
        // Populate form
        document.getElementById('f_name').value = employeeData.f_name;
        document.getElementById('last_name').value = employeeData.last_name;
        roleSelect.value = employeeData.role;
        document.getElementById('email').value = employeeData.email;
        document.getElementById('phone_no').value = employeeData.phone_no || '';
        document.getElementById('acno').value = employeeData.acno;
        document.getElementById('ifsc').value = employeeData.ifsc;
        document.getElementById('bankname').value = employeeData.bankname;
        document.getElementById('base_salary').value = employeeData.base_salary;
        document.getElementById('address').value = employeeData.address || '';
        statusSelect.value = employeeData.status;
        populateBranchSelect(employeeData.bid);
        toggleFormInputs();
        validateEmail(email);
        validatePhone(phone);
        validateSalary(salaryInput); 
        loading.style.display = 'none';
        formContainer.style.display = 'block';
      } catch (error) {
        console.error('Error loading employee:', error);
        loading.textContent = 'Error loading employee details. Please refresh.';
      }
    }

    roleSelect.addEventListener('change', () => {
      updateBranchDropdown();
      if (employeeData) {
        const currentBid = employeeData.bid || 'null';
        const selectedOption = branchSelect.querySelector(`option[value="${currentBid}"]`);
        if (selectedOption && selectedOption.classList.contains('show')) {
          branchSelect.value = currentBid;
        } else {
          branchSelect.value = '';
        }
      }
    });

    statusSelect.addEventListener('change', toggleFormInputs);

    form.addEventListener('submit', async function(event) {
      event.preventDefault();
      if (!employeeData || submitBtn.disabled) return;

      // Run real-time validations before submit
      const isEmailValid = validateEmail(email);
      const isPhoneValid = validatePhone(phone);
      const isSalaryValid = validateSalary(salaryInput); 

      if (!isEmailValid || !isPhoneValid || !isSalaryValid) { 
        return; 
      }

      const formData = new FormData(form);
      const data = Object.fromEntries(formData);

      try {
        const response = await fetch(`/admin/employee/update/${e_id}`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        const result = await response.json();

        if (response.ok && result.success) {
          // Add a success message before redirecting
          const successMessage = document.createElement('div');
          successMessage.textContent = 'Employee updated successfully!';
          successMessage.style.color = '#27ae60';
          successMessage.style.textAlign = 'center';
          successMessage.style.margin = '10px 0';
          form.insertBefore(successMessage, submitBtn);
          setTimeout(() => {
              window.location.href = `/admin/employees`;
          }, 1500);

        } else {
          showFieldError(result.message || 'An error occurred while updating the employee.');
        }
      } catch (error) {
        showFieldError('Network error: ' + error.message);
      }
    });

    // Initial load
    if (e_id) {
      loadBranches().then(loadEmployee);
    } else {
      loading.textContent = 'Invalid employee ID.';
      loading.style.display = 'block';
    }
  </script>
</body>
</html>