<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Complaint - ElectroLand</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      background: #f5f6fa;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .container {
      margin-top: 90px;
      display: flex;
      flex: 1;
      gap: 25px;
      padding: 0 20px;
    }

    .content-area {
      background: #ffffff;
      border-radius: 15px;
      padding: 20px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      flex: 1;
      overflow-x: auto;
    }

    .content-area h1 {
      color: #2d3436;
      margin-bottom: 20px;
      font-size: 1.5rem;
    }

    .header-container {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
    }

    .table-wrapper {
      overflow-x: auto;
      -webkit-overflow-scrolling: touch;
    }

    table {
      width: 100%;
      min-width: 600px;
      border-collapse: collapse;
      background: #ffffff;
      border-radius: 10px;
      border-spacing: 0;
    }

    thead {
      background: #333333;
    }

    th {
      color: white;
      padding: 12px;
      text-align: left;
      font-size: 0.9rem;
      border-bottom: 2px solid #ffffff;
    }

    td {
      padding: 12px;
      text-align: left;
      font-size: 0.9rem;
      border-bottom: 1px solid #e6e9f0;
    }

    tr:last-child td {
      border-bottom: none;
    }

    tr:nth-child(even) {
      background: #f8f9fd;
    }

    .clickable-btn {
      background: none;
      border: none;
      color: #333333;
      text-decoration: none;
      cursor: pointer;
      padding: 0;
      font-size: inherit;
      width: 100%;
      text-align: left;
    }

    .clickable-btn:hover {
      text-decoration: underline;
    }

    .form-section {
      margin-bottom: 20px;
      padding: 15px;
      border: 1px solid #e6e9f0;
      border-radius: 5px;
    }

    .form-section.active {
      border-color: #008CBA;
      box-shadow: 0 0 5px rgba(0, 140, 186, 0.3);
    }

    .section-title {
      color: #2d3436;
      font-size: 1.2rem;
      margin-bottom: 15px;
      font-weight: bold;
      padding: 0 10px;
    }

    .field-group {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
    }

    .field-group > div {
      flex: 1 1 45%;
      min-width: 200px;
    }

    .field-label {
      display: block;
      margin-bottom: 5px;
      color: #2d3436;
      font-weight: 500;
    }

    input, textarea {
      width: 100%;
      padding: 8px;
      border: 1px solid #e6e9f0;
      border-radius: 5px;
      font-size: 0.9rem;
      background: #f8f9fa;
    }

    input[readonly] {
      background: #ebedf0;
      cursor: not-allowed;
    }

    textarea {
      resize: vertical;
      min-height: 100px;
    }

    .submit-button {
      background-color: #008CBA;
      color: white;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 1rem;
    }

    .submit-button:hover {
      background-color: #007bb5;
    }

    .success-message {
      background-color: #dff0d8;
      color: #3c763d;
      padding: 10px;
      margin-bottom: 15px;
      border-radius: 5px;
      text-align: center;
    }

    .error-message {
      background-color: #f2dede;
      color: #a94442;
      padding: 10px;
      margin-bottom: 15px;
      border-radius: 5px;
      text-align: center;
    }

    .field-error {
      color: #a94442;
      font-size: 0.9rem;
      margin-top: 5px;
      display: none;
    }

    .form-group.invalid input,
    .form-group.invalid textarea {
      border-color: #a94442;
    }

    .hidden {
      display: none;
    }

    @media (max-width: 768px) {
      .container {
        flex-direction: column;
        padding: 0 10px;
      }

      .content-area {
        padding: 15px;
      }

      .content-area h1 {
        font-size: 1.3rem;
      }

      .field-group > div {
        flex: 1 1 100%;
      }
    }
  </style>
</head>
<body>
  <%- include('../../partials/navbar') %>

  <div class="container">
    <%- include('../../partials/customer_sidebar') %>

    <div class="content-area">
      <div id="successMessage" class="success-message" style="display: none;"></div>
      <div id="errorMessage" class="error-message" style="display: none;"></div>
      <div class="header-container">
        <h1>Add Complaint</h1>
      </div>

      <div class="table-wrapper">
        <table>
          <thead>
            <tr>
              <th>Sale ID</th>
              <th>Product Name</th>
              <th>Company Name</th>
              <th>Purchase Date</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody id="salesTableBody">
            <tr><td colspan="5">Loading eligible sales...</td></tr>
          </tbody>
        </table>
      </div>

      <div id="complaintSection" class="form-section hidden">
        <h2 class="section-title">File a Complaint</h2>
        <form id="complaintForm">
          <div class="field-group">
            <div class="form-group">
              <label class="field-label" for="saleId">Sale ID</label>
              <input type="text" id="saleId" name="saleId" readonly>
              <div id="saleIdError" class="field-error"></div>
            </div>
            <div class="form-group">
              <label class="field-label" for="complaintInput">Complaint Description <span style="color: red;">*</span></label>
              <textarea id="complaintInput" name="complaintInfo"></textarea>
              <div id="complaintError" class="field-error"></div>
            </div>
          </div>
          <button type="submit" class="submit-button" disabled>Submit</button>
        </form>
      </div>
    </div>
  </div>

  <%- include('../../partials/footer') %>

  <script>
    const validations = {
      saleId: false,
      complaintInfo: false
    };

    function updateSubmitButton() {
      const submitButton = document.querySelector('.submit-button');
      if (submitButton) {
        const allValid = Object.values(validations).every(valid => valid);
        submitButton.disabled = !allValid;
      } else {
        console.error('[add_complaint] Submit button not found');
      }
    }

    function showError(elementId, message) {
      const errorElement = document.getElementById(elementId);
      if (errorElement) {
        const formGroup = errorElement.parentElement;
        errorElement.textContent = message;
        errorElement.style.display = 'block';
        formGroup.classList.add('invalid');
      } else {
        console.error('[add_complaint] Error element not found:', elementId);
      }
    }

    function clearError(elementId) {
      const errorElement = document.getElementById(elementId);
      if (errorElement) {
        const formGroup = errorElement.parentElement;
        errorElement.textContent = '';
        errorElement.style.display = 'none';
        formGroup.classList.remove('invalid');
      } else {
        console.error('[add_complaint] Error element not found:', elementId);
      }
    }

    function validateSaleId() {
      const saleIdInput = document.getElementById('saleId');
      if (!saleIdInput) {
        console.error('[add_complaint] saleId input not found');
        return;
      }
      const saleId = saleIdInput.value.trim();
      if (!saleId) {
        showError('saleIdError', 'Please select a sale');
        validations.saleId = false;
      } else {
        clearError('saleIdError');
        validations.saleId = true;
      }
      updateSubmitButton();
    }

    function validateComplaintInfo() {
      const complaintInput = document.getElementById('complaintInput');
      if (!complaintInput) {
        console.error('[add_complaint] complaintInput not found');
        return;
      }
      const complaintInfo = complaintInput.value.trim();
      if (!complaintInfo) {
        showError('complaintError', 'Complaint description is required');
        validations.complaintInfo = false;
      } else {
        clearError('complaintError');
        validations.complaintInfo = true;
      }
      updateSubmitButton();
    }

    async function fetchEligibleSales() {
      const errorMessage = document.getElementById('errorMessage');
      const salesTableBody = document.getElementById('salesTableBody');
      if (!errorMessage || !salesTableBody) {
        console.error('[add_complaint] errorMessage or salesTableBody not found');
        return;
      }
      errorMessage.style.display = 'none';
      salesTableBody.innerHTML = '<tr><td colspan="5">Loading eligible sales...</td></tr>';

      try {
        const response = await fetch('/customer/complaints/eligible-sales', {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
          credentials: 'include',
        });
        if (!response.ok) {
          throw new Error(`HTTP error! Status: ${response.status}`);
        }
        const sales = await response.json();
        console.log('[fetchEligibleSales] Sales received:', sales);

        salesTableBody.innerHTML = '';
        if (sales.length === 0) {
          salesTableBody.innerHTML = '<tr><td colspan="5">No eligible sales found. Ensure you have completed purchases without existing complaints.</td></tr>';
          return;
        }

        sales.forEach(sale => {
          const row = document.createElement('tr');
          row.innerHTML = `
            <td>${sale.sales_id}</td>
            <td>${sale.Prod_name || 'Unknown Product'}</td>
            <td>${sale.com_name || 'Unknown Company'}</td>
            <td>${sale.sales_date || 'N/A'}</td>
            <td><button class="clickable-btn" data-saleid="${sale.sales_id}">File Complaint</button></td>
          `;
          salesTableBody.appendChild(row);
        });

        document.querySelectorAll('.clickable-btn').forEach(button => {
          button.addEventListener('click', () => {
            const saleId = button.getAttribute('data-saleid');
            console.log('[add_complaint] File Complaint button clicked, saleId:', saleId);

            if (!saleId) {
              console.error('[add_complaint] Sale ID not found on button');
              showErrorMessage('Failed to load complaint form: Sale ID missing.');
              return;
            }

            const complaintSection = document.getElementById('complaintSection');
            const complaintForm = document.getElementById('complaintForm');
            const saleIdInput = document.getElementById('saleId');
            const complaintInput = document.getElementById('complaintInput');

            if (!complaintSection || !complaintForm || !saleIdInput || !complaintInput) {
              console.error('[add_complaint] Form elements not found', {
                complaintSection: !!complaintSection,
                complaintForm: !!complaintForm,
                saleIdInput: !!saleIdInput,
                complaintInput: !!complaintInput
              });
              showErrorMessage('Failed to load complaint form: Form elements missing.');
              return;
            }

            saleIdInput.value = saleId;
            complaintForm.classList.remove('hidden');
            complaintSection.classList.remove('hidden');
            complaintSection.classList.add('active'); // Highlight form
            complaintInput.value = '';
            clearError('saleIdError');
            clearError('complaintError');
            validations.saleId = true;
            validations.complaintInfo = false;
            updateSubmitButton();
            complaintSection.scrollIntoView({ behavior: 'smooth' });
            complaintInput.focus();
            console.log('[add_complaint] Form displayed, sale_id set to:', saleId);
          });
        });
      } catch (error) {
        console.error('[add_complaint] Error fetching eligible sales:', error);
        showErrorMessage('Failed to load eligible sales. Please try again.');
        salesTableBody.innerHTML = '<tr><td colspan="5">Error loading eligible sales.</td></tr>';
      }
    }

    function showErrorMessage(message) {
      const errorMessage = document.getElementById('errorMessage');
      if (errorMessage) {
        errorMessage.textContent = message;
        errorMessage.style.display = 'block';
        setTimeout(() => {
          errorMessage.style.display = 'none';
        }, 5000);
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const urlParams = new URLSearchParams(window.location.search);
      const successMessage = document.getElementById('successMessage');
      const errorMessage = document.getElementById('errorMessage');

      if (!successMessage || !errorMessage) {
        console.error('[add_complaint] Message elements not found', {
          successMessage: !!successMessage,
          errorMessage: !!errorMessage
        });
        return;
      }

      if (urlParams.get('success')) {
        successMessage.textContent = urlParams.get('success');
        successMessage.style.display = 'block';
        setTimeout(() => {
          successMessage.style.display = 'none';
        }, 3000);
      }

      if (urlParams.get('error')) {
        errorMessage.textContent = urlParams.get('error');
        errorMessage.style.display = 'block';
        setTimeout(() => {
          errorMessage.style.display = 'none';
        }, 3000);
      }

      fetchEligibleSales();

      const complaintForm = document.getElementById('complaintForm');
      const saleIdInput = document.getElementById('saleId');
      const complaintInput = document.getElementById('complaintInput');

      if (!complaintForm || !saleIdInput || !complaintInput) {
        console.error('[add_complaint] Form elements not found on load', {
          complaintForm: !!complaintForm,
          saleIdInput: !!saleIdInput,
          complaintInput: !!complaintInput
        });
        return;
      }

      saleIdInput.addEventListener('input', validateSaleId);
      complaintInput.addEventListener('input', validateComplaintInfo);

      complaintForm.addEventListener('submit', async (event) => {
        event.preventDefault();
        console.log('[add_complaint] Form submission triggered');

        validateSaleId();
        validateComplaintInfo();

        if (!Object.values(validations).every(valid => valid)) {
          showErrorMessage('Please correct all errors before submitting');
          console.log('[add_complaint] Validation failed');
          return;
        }

        const sale_id = saleIdInput.value.trim();
        const complaint_info = complaintInput.value.trim();

        try {
          const response = await fetch('/customer/complaints/add', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify({ sale_id, complaint_info })
          });

          if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
          }

          const result = await response.json();
          console.log('[add_complaint] Server response:', result);

          if (result.success) {
            window.location.href = `/customer/complaints?success=${encodeURIComponent(result.message || 'Complaint added successfully!')}`;
          } else {
            showErrorMessage(result.message || 'Failed to submit complaint');
            console.error('[add_complaint] Submission failed:', result.message);
          }
        } catch (error) {
          console.error('[add_complaint] Error submitting complaint:', error);
          showErrorMessage(`Failed to submit complaint: ${error.message}`);
        }
      });
    });
  </script>
</body>
</html>