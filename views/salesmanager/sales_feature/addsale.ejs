<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Sale - ElectroLand</title>
  <link rel="stylesheet" href="/styles.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      background: #f5f6fa;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .container {
      margin-top: 90px;
      display: flex;
      flex: 1;
      gap: 25px;
      padding: 0 20px;
    }

    .content-area {
      background: #ffffff;
      border-radius: 15px;
      padding: 25px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      flex: 1;
    }

    h2 {
      color: #2d3436;
      margin-bottom: 20px;
      font-size: 1.5rem;
    }

    h3 {
      color: #2d3436;
      margin: 20px 0 10px;
      font-size: 1.2rem;
    }

    .form-group {
      margin-bottom: 15px;
    }

    .form-group label {
      display: block;
      margin-bottom: 5px;
      color: #2d3436;
      font-weight: 500;
      font-size: 0.9rem;
    }

    .form-group input,
    .form-group select {
      width: 100%;
      padding: 8px;
      border: 1px solid #e6e9f0;
      border-radius: 5px;
      font-size: 0.9rem;
      background: #f8f9fa;
      color: #2d3436;
      transition: border-color 0.3s;
    }

    .form-group select:focus,
    .form-group input:focus {
      border-color: #333;
      outline: none;
    }

    .form-group input[readonly] {
      background: #e9ecef;
      cursor: default;
    }

    .form-row {
      display: flex;
      gap: 15px;
      flex-wrap: wrap;
    }

    .form-row .form-group {
      flex: 1 1 45%;
      min-width: 200px;
      max-width: 400px;
    }

    .product-list {
      max-height: 200px;
      overflow-y: auto;
      border: 1px solid #e6e9f0;
      border-radius: 5px;
      padding: 8px;
      background: #f8f9fa;
    }

    .product-list option {
      padding: 5px;
      font-size: 0.9rem;
    }

    .button {
      padding: 10px 20px;
      background-color: #333333;
      color: white;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: background-color 0.3s;
      width: 100%;
      margin-top: 20px;
    }

    .button:hover {
      background-color: #555555;
    }

    .back-link {
      display: block;
      margin-top: 15px;
      color: #2d3436;
      text-decoration: none;
      text-align: center;
      font-size: 0.9rem;
      padding: 10px 20px;
      background: #333333;
      color: white;
      border-radius: 5px;
      transition: background-color 0.3s;
    }

    .back-link:hover {
      background: #555555;
    }

    .error-message {
      color: #d63031;
      background: #ffeeee;
      padding: 10px;
      border-radius: 5px;
      margin-bottom: 20px;
      font-size: 0.9rem;
      text-align: center;
      display: none;
    }

    .field-error {
      color: #d63031;
      font-size: 0.8rem;
      margin-top: 5px;
      display: none;
    }

    .form-group input.invalid,
    .form-group select.invalid {
      border-color: #d63031;
    }

    @media (max-width: 768px) {
      .container {
        flex-direction: column;
        padding: 0 20px;
      }

      .content-area {
        min-height: auto;
        padding: 15px;
      }

      h2 {
        font-size: 1.2rem;
      }

      h3 {
        font-size: 1rem;
      }

      .form-row {
        flex-direction: column;
      }

      .form-row .form-group {
        flex: 1 1 100%;
        max-width: 100%;
      }

      .form-group input,
      .form-group select {
        font-size: 0.85rem;
      }

      .button,
      .back-link {
        padding: 10px;
        font-size: 0.85rem;
      }
    }

    @media (min-width: 769px) and (max-width: 1024px) {
      h2 {
        font-size: 1.3rem;
      }

      h3 {
        font-size: 1.1rem;
      }

      .form-row .form-group {
        flex: 1 1 45%;
      }

      .form-group input,
      .form-group select {
        font-size: 0.85rem;
      }

      .button,
      .back-link {
        padding: 8px 16px;
        font-size: 0.85rem;
      }
    }
  </style>
</head>
<body>
  <%- include('../../partials/navbar') %>

  <div class="container">
    <%- include('../../partials/salesmanager_sidebar') %>

    <div class="content-area" id="content">
      <h2>Add Sale</h2>

      <div id="error-message" class="error-message"></div>

      <form id="sale-form">
        <h3>Sale Information</h3>
        <div class="form-row">
          <div class="form-group">
            <label>Salesman Name</label>
            <select id="salesmanSelect" name="salesman_name" required>
              <option value="">Select Salesman</option>
            </select>
            <div class="field-error" id="salesman-error">Please select a salesman.</div>
          </div>
          <div class="form-group">
            <label>Customer Name</label>
            <input type="text" name="customer_name" required minlength="2">
            <div class="field-error" id="customer-error">Please enter customer name.</div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label>Sale Date</label>
            <input type="date" name="saledate" required>
            <div class="field-error" id="saledate-error">Please select a sale date.</div>
          </div>
          <div class="form-group">
            <label>Unique Code</label>
            <input type="text" name="unique_code" required>
            <div class="field-error" id="unique-code-error">Please enter a unique code.</div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label>Phone Number</label>
            <input type="tel" name="phone_number" required pattern="^\+?\d{10}$" placeholder="+1234567890">
            <div class="field-error" id="phone-error">Please enter a valid 10-digit phone number.</div>
          </div>
          <div class="form-group">
            <label>Address</label>
            <input type="text" name="address">
          </div>
        </div>

        <h3>Product Information</h3>
        <div class="form-row">
          <div class="form-group">
            <label>Company Name</label>
            <select id="companySelect" name="company_id" required onchange="fetchProducts()">
              <option value="">Select Company</option>
            </select>
            <div class="field-error" id="company-error">Please select a company.</div>
          </div>
          <div class="form-group">
            <label>Product</label>
            <select id="productSelect" name="product_id" class="product-list" required onchange="updateProductDetails()">
              <option value="">Select Product</option>
            </select>
            <div class="field-error" id="product-error">Please select a product.</div>
          </div>
        </div>
        <div class="form-row">
          <div class="form-group">
            <label>Installation</label>
            <input type="text" id="installation" name="installation" readonly>
          </div>
          <div class="form-group">
            <label>Installation Type</label>
            <input type="text" id="installationType" name="installationType" readonly>
          </div>
          <div class="form-group">
            <label>Installation Charge</label>
            <input type="text" id="installationCharge" name="installationcharge" readonly>
          </div>
        </div>

        <h3>Transaction Details</h3>
        <div class="form-row">
          <div class="form-group">
            <label>Purchased Price</label>
            <input type="number" id="purchasedPrice" name="purchased_price" step="0.01" readonly required>
            <div class="field-error" id="purchased-price-error">Purchased price is required.</div>
          </div>
          <div class="form-group">
            <label>Sold Price</label>
            <input type="number" name="sold_price" step="0.01" required min="0">
            <div class="field-error" id="sold-price-error">Please enter a valid sold price greater than 0.</div>
          </div>
          <div class="form-group">
            <label>Quantity</label>
            <input type="number" name="quantity" required min="1" value="1">
            <div class="field-error" id="quantity-error">Please enter a quantity greater than 0.</div>
          </div>
        </div>

        <button type="submit" class="button">Add Sale</button>
      </form>

      <a href="/salesmanager/sales" class="back-link">Back to Sales</a>
    </div>
  </div>

  <%- include('../../partials/footer') %>

  <script>
    let productsData = [];

    async function fetchSalesmen() {
      try {
        const response = await fetch('/salesmanager/salesmen');
        const salesmen = await response.json();
        const salesmanSelect = document.getElementById('salesmanSelect');
        salesmen.forEach(salesman => {
          const option = document.createElement('option');
          option.value = `${salesman.f_name} ${salesman.last_name}`;
          option.textContent = `${salesman.f_name} ${salesman.last_name}`;
          salesmanSelect.appendChild(option);
        });
      } catch (error) {
        console.error('Error fetching salesmen:', error);
      }
    }

    async function fetchCompanies() {
      try {
        const response = await fetch('/salesmanager/companies');
        const companies = await response.json();
        const companySelect = document.getElementById('companySelect');
        companies.forEach(company => {
          const option = document.createElement('option');
          option.value = company.c_id;
          option.textContent = company.cname;
          companySelect.appendChild(option);
        });
      } catch (error) {
        console.error('Error fetching companies:', error);
      }
    }

    async function fetchProducts() {
      const companySelect = document.getElementById('companySelect');
      const productSelect = document.getElementById('productSelect');
      const purchasedPriceInput = document.getElementById('purchasedPrice');
      const installationInput = document.getElementById('installation');
      const installationTypeInput = document.getElementById('installationType');
      const installationChargeInput = document.getElementById('installationCharge');
      const companyId = companySelect.value;

      productSelect.innerHTML = '<option value="">Select Product</option>';
      purchasedPriceInput.value = '';
      installationInput.value = '';
      installationTypeInput.value = '';
      installationChargeInput.value = '';
      productsData = [];

      if (companyId) {
        try {
          const response = await fetch(`/salesmanager/products-by-company/${companyId}`);
          console.log('[fetchProducts] Response status:', response.status);
          if (!response.ok) {
            const errorText = await response.text();
            console.log('[fetchProducts] Error response:', errorText);
            throw new Error('Network response was not ok: ' + errorText);
          }
          productsData = await response.json();
          console.log('[fetchProducts] Response data:', productsData);
          productsData.forEach(product => {
            const option = document.createElement('option');
            option.value = product.prod_id;
            option.textContent = `${product.Prod_name} (Model: ${product.Model_no})`;
            productSelect.appendChild(option);
          });
          if (productsData.length === 0) {
            console.log('[fetchProducts] No products found for companyId:', companyId);
            document.getElementById('error-message').textContent = 'No products found for this company.';
            document.getElementById('error-message').style.display = 'block';
          }
        } catch (error) {
          console.error('[fetchProducts] Error fetching products:', error);
          document.getElementById('error-message').textContent = 'Failed to load products. Please try again.';
          document.getElementById('error-message').style.display = 'block';
        }
      }
    }

    function updateProductDetails() {
      const productSelect = document.getElementById('productSelect');
      const purchasedPriceInput = document.getElementById('purchasedPrice');
      const installationInput = document.getElementById('installation');
      const installationTypeInput = document.getElementById('installationType');
      const installationChargeInput = document.getElementById('installationCharge');
      const purchasedPriceError = document.getElementById('purchased-price-error');
      const selectedProductId = productSelect.value;

      if (selectedProductId) {
        const selectedProduct = productsData.find(product => product.prod_id === selectedProductId);
        if (selectedProduct) {
          console.log('[updateProductDetails] Selected product:', selectedProduct);
          purchasedPriceInput.value = selectedProduct.Retail_price || '';
          installationInput.value = selectedProduct.installation || '';
          installationTypeInput.value = selectedProduct.installationType || '';
          installationChargeInput.value = selectedProduct.installationcharge || '';
          validatePurchasedPrice(purchasedPriceInput, purchasedPriceError);
        } else {
          purchasedPriceInput.value = '';
          installationInput.value = '';
          installationTypeInput.value = '';
          installationChargeInput.value = '';
          purchasedPriceInput.classList.remove('invalid');
          purchasedPriceError.style.display = 'none';
        }
      } else {
        purchasedPriceInput.value = '';
        installationInput.value = '';
        installationTypeInput.value = '';
        installationChargeInput.value = '';
        purchasedPriceInput.classList.remove('invalid');
        purchasedPriceError.style.display = 'none';
      }
    }

    // Form Validation Functions
    function validateRequired(field, errorElement) {
      if (!field.value.trim()) {
        field.classList.add('invalid');
        errorElement.style.display = 'block';
        return false;
      } else {
        field.classList.remove('invalid');
        errorElement.style.display = 'none';
        return true;
      }
    }

    function validateCustomerName(field, errorElement) {
      const value = field.value.trim();
      if (!value) {
        errorElement.textContent = 'Please enter customer name.';
        field.classList.add('invalid');
        errorElement.style.display = 'block';
        return false;
      } else if (value.length < 2) {
        errorElement.textContent = 'Customer name must be at least 2 characters.';
        field.classList.add('invalid');
        errorElement.style.display = 'block';
        return false;
      } else {
        field.classList.remove('invalid');
        errorElement.style.display = 'none';
        return true;
      }
    }

    function validatePhone(field, errorElement) {
      const value = field.value.trim();
      let cleanPhone = value.replace(/\+/, '');
      if (!value || cleanPhone.length !== 10 || !/^\d{10}$/.test(cleanPhone)) {
        field.classList.add('invalid');
        errorElement.textContent = 'Please enter a valid 10-digit phone number.';
        errorElement.style.display = 'block';
        return false;
      } else {
        field.classList.remove('invalid');
        errorElement.style.display = 'none';
        return true;
      }
    }

    function validateSoldPrice(field, errorElement) {
      const value = parseFloat(field.value);
      if (isNaN(value) || value <= 0) {
        field.classList.add('invalid');
        errorElement.style.display = 'block';
        return false;
      } else {
        field.classList.remove('invalid');
        errorElement.style.display = 'none';
        return true;
      }
    }

    function validateQuantity(field, errorElement) {
      const value = parseInt(field.value);
      if (isNaN(value) || value < 1) {
        field.classList.add('invalid');
        errorElement.style.display = 'block';
        return false;
      } else {
        field.classList.remove('invalid');
        errorElement.style.display = 'none';
        return true;
      }
    }

    function validatePurchasedPrice(field, errorElement) {
      const value = parseFloat(field.value);
      if (isNaN(value) || value <= 0) {
        field.classList.add('invalid');
        errorElement.style.display = 'block';
        return false;
      } else {
        field.classList.remove('invalid');
        errorElement.style.display = 'none';
        return true;
      }
    }

    // Add Event Listeners for Real-time Validation
    function addValidationListeners() {
      // Salesman Select
      const salesmanSelect = document.getElementById('salesmanSelect');
      const salesmanError = document.getElementById('salesman-error');
      salesmanSelect.addEventListener('blur', () => validateRequired(salesmanSelect, salesmanError));
      salesmanSelect.addEventListener('change', () => validateRequired(salesmanSelect, salesmanError));

      // Customer Name
      const customerInput = document.querySelector('input[name="customer_name"]');
      const customerError = document.getElementById('customer-error');
      customerInput.addEventListener('blur', () => validateCustomerName(customerInput, customerError));
      customerInput.addEventListener('input', () => validateCustomerName(customerInput, customerError));

      // Sale Date
      const saleDateInput = document.querySelector('input[name="saledate"]');
      const saleDateError = document.getElementById('saledate-error');
      saleDateInput.addEventListener('blur', () => validateRequired(saleDateInput, saleDateError));
      saleDateInput.addEventListener('change', () => validateRequired(saleDateInput, saleDateError));

      // Unique Code
      const uniqueCodeInput = document.querySelector('input[name="unique_code"]');
      const uniqueCodeError = document.getElementById('unique-code-error');
      uniqueCodeInput.addEventListener('blur', () => validateRequired(uniqueCodeInput, uniqueCodeError));
      uniqueCodeInput.addEventListener('input', () => validateRequired(uniqueCodeInput, uniqueCodeError));

      // Phone Number
      const phoneInput = document.querySelector('input[name="phone_number"]');
      const phoneError = document.getElementById('phone-error');
      phoneInput.addEventListener('blur', () => validatePhone(phoneInput, phoneError));
      phoneInput.addEventListener('input', () => validatePhone(phoneInput, phoneError));

      // Company Select
      const companySelect = document.getElementById('companySelect');
      const companyError = document.getElementById('company-error');
      companySelect.addEventListener('blur', () => validateRequired(companySelect, companyError));
      companySelect.addEventListener('change', () => validateRequired(companySelect, companyError));

      // Product Select
      const productSelect = document.getElementById('productSelect');
      const productError = document.getElementById('product-error');
      productSelect.addEventListener('blur', () => validateRequired(productSelect, productError));
      productSelect.addEventListener('change', () => validateRequired(productSelect, productError));

      // Purchased Price (readonly, validated in updateProductDetails)

      // Sold Price
      const soldPriceInput = document.querySelector('input[name="sold_price"]');
      const soldPriceError = document.getElementById('sold-price-error');
      soldPriceInput.addEventListener('blur', () => validateSoldPrice(soldPriceInput, soldPriceError));
      soldPriceInput.addEventListener('input', () => validateSoldPrice(soldPriceInput, soldPriceError));

      // Quantity
      const quantityInput = document.querySelector('input[name="quantity"]');
      const quantityError = document.getElementById('quantity-error');
      quantityInput.addEventListener('blur', () => validateQuantity(quantityInput, quantityError));
      quantityInput.addEventListener('input', () => validateQuantity(quantityInput, quantityError));
    }

    const form = document.getElementById('sale-form');
    form.addEventListener('submit', async function(event) {
      event.preventDefault();

      const errorMessage = document.getElementById('error-message');
      errorMessage.style.display = 'none';
      errorMessage.textContent = '';

      // Form validation
      let valid = true;
      const fieldErrors = document.querySelectorAll('.field-error');
      fieldErrors.forEach(error => error.style.display = 'none');

      // Required fields
      const requiredFields = form.querySelectorAll('[required]');
      requiredFields.forEach(field => {
        if (!field.value.trim()) {
          valid = false;
          const errorId = `${field.id || field.name}-error`;
          const errorEl = document.getElementById(errorId);
          if (errorEl) errorEl.style.display = 'block';
          field.classList.add('invalid');
        }
      });

      // Customer name length
      const customerInput = form.querySelector('input[name="customer_name"]');
      const customerValue = customerInput.value.trim();
      if (customerValue.length < 2) {
        valid = false;
        document.getElementById('customer-error').textContent = 'Customer name must be at least 2 characters.';
        document.getElementById('customer-error').style.display = 'block';
        customerInput.classList.add('invalid');
      }

      // Phone number
      const phoneInput = form.querySelector('input[name="phone_number"]');
      const phoneValue = phoneInput.value.trim();
      let cleanPhone = phoneValue.replace(/\+/, '');
      if (!phoneValue || cleanPhone.length !== 10 || !/^\d{10}$/.test(cleanPhone)) {
        valid = false;
        document.getElementById('phone-error').textContent = 'Please enter a valid 10-digit phone number.';
        document.getElementById('phone-error').style.display = 'block';
        phoneInput.classList.add('invalid');
      }

      // Sold price > 0
      const soldPrice = parseFloat(form.querySelector('input[name="sold_price"]').value);
      if (isNaN(soldPrice) || soldPrice <= 0) {
        valid = false;
        document.getElementById('sold-price-error').style.display = 'block';
        form.querySelector('input[name="sold_price"]').classList.add('invalid');
      }

      // Quantity > 0
      const quantity = parseInt(form.querySelector('input[name="quantity"]').value);
      if (isNaN(quantity) || quantity < 1) {
        valid = false;
        document.getElementById('quantity-error').style.display = 'block';
        form.querySelector('input[name="quantity"]').classList.add('invalid');
      }

      // Validate purchased price
      const purchasedPrice = parseFloat(form.querySelector('input[name="purchased_price"]').value);
      if (isNaN(purchasedPrice) || purchasedPrice <= 0) {
        valid = false;
        document.getElementById('purchased-price-error').style.display = 'block';
        form.querySelector('input[name="purchased_price"]').classList.add('invalid');
      }

      if (!valid) {
        errorMessage.textContent = 'Please fix the errors in the form.';
        errorMessage.style.display = 'block';
        return;
      }

      const formData = new FormData(form);
      const data = Object.fromEntries(formData);
      console.log('[sale-form] Submitting form data:', data);

      try {
        const response = await fetch('/salesmanager/add-sale', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
          credentials: 'include'
        });

        console.log('[sale-form] Response status:', response.status);
        const result = await response.json();
        console.log('[sale-form] Response data:', result);

        if (result.success) {
          window.location.href = '/salesmanager/sales';
        } else {
          errorMessage.textContent = result.message || 'An error occurred while adding the sale.';
          errorMessage.style.display = 'block';
        }
      } catch (error) {
        console.error('[sale-form] Network error:', error);
        errorMessage.textContent = 'Network error: ' + error.message;
        errorMessage.style.display = 'block';
      }
    });

    document.addEventListener('DOMContentLoaded', () => {
      console.log('[DOMContentLoaded] Initializing form');
      fetchSalesmen();
      fetchCompanies();
      addValidationListeners();
    });
  </script>
</body>
</html>