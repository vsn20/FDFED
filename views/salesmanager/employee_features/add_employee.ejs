<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Add Employee - ElectroLand</title>
  <link rel="stylesheet" href="/styles.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      background: #f5f6fa;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .container {
      margin-top: 90px;
      display: flex;
      flex: 1;
      gap: 25px;
      padding: 0 20px !important;
      max-width: 100%;
    }

    .content-area {
      background: #ffffff;
      border-radius: 15px;
      padding: 25px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      flex: 1;
    }

    .content-area h2 {
      color: #2d3436;
      margin-bottom: 20px;
    }

    fieldset {
      border: 1px solid #e6e9f0;
      border-radius: 5px;
      padding: 15px;
      margin-bottom: 20px;
    }

    legend {
      color: #2d3436;
      font-weight: bold;
      padding: 0 10px;
      font-size: 1.2rem;
    }

    .field-group {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
    }

    .field-group > div {
      flex: 1 1 45%;
      min-width: 200px;
      position: relative;
    }

    label {
      display: block;
      margin-bottom: 5px;
      color: #2d3436;
      font-weight: 500;
    }

    input, textarea {
      width: 100%;
      padding: 8px;
      border: 1px solid #e6e9f0;
      border-radius: 5px;
      font-size: 0.9rem;
      background: #fff;
      transition: border-color 0.3s;
    }

    textarea {
      height: 100px;
      resize: vertical;
    }

    input:focus, textarea:focus {
      border-color: #333333;
      outline: none;
    }

    button[type="button"] {
      display: inline-block;
      padding: 10px 20px;
      background-color: #333333;
      color: white;
      border: none;
      border-radius: 5px;
      font-size: 0.9rem;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    button[type="button"]:hover {
      background-color: #555555;
    }

    button[type="button"]:disabled {
      background-color: #6c757d;
      cursor: not-allowed;
    }

    .error {
      color: #e74c3c;
      font-size: 0.85rem;
      margin-top: 5px;
      display: none;
    }

    .error.show {
      display: block;
    }

    #error-message {
      color: #e74c3c;
      font-size: 0.85rem;
      margin: 10px 0;
      text-align: center;
      display: none;
    }

    #success-message {
      background-color: #dff0d8;
      color: #3c763d;
      padding: 10px;
      margin-bottom: 15px;
      border-radius: 5px;
      text-align: center;
      display: none;
    }

    @media (max-width: 768px) {
      .container {
        flex-direction: column;
        padding: 0 10px !important;
      }

      .content-area {
        padding: 15px;
      }

      .field-group > div {
        flex: 1 1 100%;
      }

      button[type="button"] {
        width: 100%;
        padding: 8px;
        font-size: 0.85rem;
      }
    }
  </style>
</head>
<body>
  <%- include('../../partials/navbar') %>

  <div class="container">
    <%- include('../../partials/salesmanager_sidebar') %>

    <div class="content-area" id="content">
      <div class="form-container">
        <h2>Add Employee</h2>
        <div id="success-message"></div>
        <div id="employee-login-form">
          <fieldset>
            <legend>Personal Details</legend>
            <div class="field-group">
              <div>
                <label for="f_name">First Name</label>
                <input type="text" id="f_name" name="f_name" required placeholder="Enter first name">
                <span class="error" id="f_name-error">First name is required</span>
              </div>
              <div>
                <label for="last_name">Last Name</label>
                <input type="text" id="last_name" name="last_name" required placeholder="Enter last name">
                <span class="error" id="last_name-error">Last name is required</span>
              </div>
              <div>
                <label for="email">Email</label>
                <input type="email" id="email" name="email" required placeholder="Enter email">
                <span class="error" id="email-error">Please enter a valid email address</span>
              </div>
              <div>
                <label for="phone_no">Phone Number</label>
                <input type="tel" id="phone_no" name="phone_no" maxlength="10" placeholder="Enter phone number">
                <span class="error" id="phone_no-error">Phone number must be 10 digits</span>
              </div>
              <div>
                <label for="address">Address</label>
                <textarea id="address" name="address" placeholder="Enter address"></textarea>
                <span class="error" id="address-error">Address is required</span>
              </div>
            </div>
          </fieldset>

          <fieldset>
            <legend>Bank Details</legend>
            <div class="field-group">
              <div>
                <label for="acno">Account Number</label>
                <input type="text" id="acno" name="acno" required placeholder="Enter account number">
                <span class="error" id="acno-error">Valid account number is required</span>
              </div>
              <div>
                <label for="ifsc">IFSC Code</label>
                <input type="text" id="ifsc" name="ifsc" required placeholder="Enter IFSC code">
                <span class="error" id="ifsc-error">Valid IFSC code is required (e.g., SBIN0001234)</span>
              </div>
              <div>
                <label for="bankname">Bank Name</label>
                <input type="text" id="bankname" name="bankname" required placeholder="Enter bank name">
                <span class="error" id="bankname-error">Bank name is required</span>
              </div>
            </div>
          </fieldset>

          <fieldset>
            <legend>Employment Details</legend>
            <div class="field-group">
              <div>
                <label for="base_salary">Monthly Salary</label>
                <input type="number" id="base_salary" name="base_salary" required placeholder="Enter monthly salary" step="0.01">
                <span class="error" id="base_salary-error">Salary must be a positive number</span>
              </div>
            </div>
          </fieldset>

          <div id="error-message"></div>
          <button type="button" id="submit-btn" onclick="addEmployee()" disabled>Add Employee</button>
        </div>
      </div>
    </div>
  </div>

  <%- include('../../partials/footer') %>

  <script>
    const form = document.getElementById('employee-login-form');
    const errorMessage = document.getElementById('error-message');
    const successMessage = document.getElementById('success-message');
    const submitBtn = document.getElementById('submit-btn');

    const fields = {
      f_name: { errorId: 'f_name-error', validate: val => val.trim().length > 0 },
      last_name: { errorId: 'last_name-error', validate: val => val.trim().length > 0 },
      email: { errorId: 'email-error', validate: val => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(val) },
      phone_no: { errorId: 'phone_no-error', validate: val => !val || /^[0-9]{10}$/.test(val) },
      address: { errorId: 'address-error', validate: val => true }, // Address is optional
      acno: { errorId: 'acno-error', validate: val => /^\d{9,18}$/.test(val) },
      ifsc: { errorId: 'ifsc-error', validate: val => /^[A-Z]{4}0[A-Z0-9]{6}$/.test(val) },
      bankname: { errorId: 'bankname-error', validate: val => val.trim().length > 0 },
      base_salary: { errorId: 'base_salary-error', validate: val => !isNaN(val) && parseFloat(val) >= 0 }
    };

    function validateField(fieldId) {
      const field = document.getElementById(fieldId);
      const errorElement = document.getElementById(fields[fieldId].errorId);
      const isValid = fields[fieldId].validate(field.value);
      field.style.borderColor = isValid ? '#e6e9f0' : '#e74c3c';
      field.style.backgroundColor = isValid ? '#fff' : '#fff5f5';
      errorElement.classList.toggle('show', !isValid);
      if (!isValid) console.log(`Validation failed for ${fieldId}: ${field.value}`);
      return isValid;
    }

    function validateForm() {
      const isValid = Object.keys(fields).every(fieldId => validateField(fieldId));
      submitBtn.disabled = !isValid;
      if (!isValid) console.log('Form validation failed');
      return isValid;
    }

    Object.keys(fields).forEach(fieldId => {
      const field = document.getElementById(fieldId);
      field.addEventListener('input', () => {
        validateField(fieldId);
        validateForm();
      });
    });

    async function addEmployee() {
      errorMessage.textContent = '';
      errorMessage.style.display = 'none';
      successMessage.style.display = 'none';

      if (!validateForm()) {
        errorMessage.textContent = 'Please correct the errors in the form';
        errorMessage.style.display = 'block';
        return;
      }

      const data = {
        f_name: document.getElementById('f_name').value,
        last_name: document.getElementById('last_name').value,
        email: document.getElementById('email').value,
        phone_no: document.getElementById('phone_no').value,
        acno: document.getElementById('acno').value,
        ifsc: document.getElementById('ifsc').value,
        bankname: document.getElementById('bankname').value,
        base_salary: parseFloat(document.getElementById('base_salary').value),
        address: document.getElementById('address').value,
      };

      try {
        const response = await fetch('/salesmanager/add-employee', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(data),
        });

        const result = await response.json();

        if (result.error) {
          errorMessage.textContent = result.error;
          errorMessage.style.display = 'block';
        } else if (result.success) {
          successMessage.textContent = 'Employee added successfully';
          successMessage.style.display = 'block';
          setTimeout(() => {
            window.location.href = result.redirect;
          }, 1000);
        }
      } catch (error) {
        errorMessage.textContent = 'Network error: ' + error.message;
        errorMessage.style.display = 'block';
      }
    }

    document.getElementById('phone_no').addEventListener('input', function (e) {
      this.value = this.value.replace(/[^0-9]/g, '');
      if (this.value.length > 10) {
        this.value = this.value.slice(0, 10);
      }
    });

    document.getElementById('acno').addEventListener('input', function (e) {
      this.value = this.value.replace(/[^0-9]/g, '');
    });

    document.getElementById('ifsc').addEventListener('input', function (e) {
      this.value = this.value.toUpperCase().replace(/[^A-Z0-9]/g, '');
      if (this.value.length > 11) {
        this.value = this.value.slice(0, 11);
      }
    });

    document.getElementById('base_salary').addEventListener('input', function (e) {
      if (this.value < 0) {
        this.value = 0;
      }
    });

    // Initial form validation
    validateForm();
  </script>
</body>
</html>