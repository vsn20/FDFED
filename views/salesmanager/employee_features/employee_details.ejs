<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Employee Details - ElectroLand</title>
  <link rel="stylesheet" href="/styles.css">
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
      background: #f5f6fa;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }

    .container {
      margin-top: 90px;
      display: flex;
      flex: 1;
      gap: 25px;
      padding: 0 20px;
      max-width: 100%;
    }

    .content-area {
      background: #ffffff;
      border-radius: 15px;
      padding: 25px;
      box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
      flex: 1;
    }

    .content-area h1 {
      color: #2d3436;
      margin-bottom: 20px;
    }

    fieldset {
      border: 1px solid #ddd;
      border-radius: 5px;
      padding: 15px;
      margin-bottom: 20px;
    }

    legend {
      padding: 0 10px;
      font-weight: bold;
    }

    .field-group {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
    }

    .field-group div {
      flex: 1;
      min-width: 200px;
    }

    label {
      display: block;
      margin-bottom: 5px;
      color: #2d3436;
    }

    input[readonly], textarea[readonly] {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      background-color: #e9ecef;
      cursor: not-allowed;
    }

    input:not([readonly]) {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
      background-color: #ffffff;
      transition: border-color 0.3s;
    }

    input:focus:not([readonly]) {
      border-color: #333;
      outline: none;
    }

    .fire-button, .edit-button, .submit-button, .cancel-button {
      display: inline-block;
      padding: 10px 20px;
      border: none;
      border-radius: 5px;
      margin-top: 20px;
      cursor: pointer;
      color: white;
    }

    .fire-button {
      background-color: #dc3545;
      margin-left: 10px;
    }

    .fire-button:hover {
      background-color: #c82333;
    }

    .edit-button {
      background-color: #4CAF50;
      margin-left: 10px;
    }

    .edit-button:hover {
      background-color: #45a049;
    }

    .submit-button {
      background-color: #008CBA;
      margin-left: 10px;
    }

    .submit-button:hover {
      background-color: #007bb5;
    }

    .cancel-button {
      background-color: #6c757d;
      margin-left: 10px;
    }

    .cancel-button:hover {
      background-color: #5a6268;
    }

    .back-button {
      display: inline-block;
      padding: 10px 20px;
      background-color: #6c757d;
      color: white;
      text-decoration: none;
      border-radius: 5px;
      margin-top: 20px;
      margin-right: 10px;
    }

    .back-button:hover {
      background-color: #5a6268;
    }

    .success-message {
      background-color: #dff0d8;
      color: #3c763d;
      padding: 10px;
      margin-bottom: 15px;
      border-radius: 5px;
      text-align: center;
    }

    #loading {
      text-align: center;
      padding: 20px;
      color: #636e72;
    }

    #employeeForm {
      display: none;
    }

    .field-error {
      color: #d63031;
      font-size: 0.8rem;
      margin-top: 5px;
      display: none;
    }

    input.invalid {
      border-color: #d63031;
    }

    @media (max-width: 768px) {
      .container {
        flex-direction: column;
        padding: 0 20px;
      }

      .field-group {
        flex-direction: column;
      }
    }
  </style>
</head>
<body>
  <%- include('../../partials/navbar') %>

  <div class="container">
    <%- include('../../partials/salesmanager_sidebar') %>

    <div class="content-area" id="content">
      <h1>Employee Details</h1>
      <% if (message) { %>
        <div class="success-message"><%= message %></div>
      <% } %>

      <div id="loading">Loading employee details...</div>

      <div id="employeeForm" style="display: none;">
        <fieldset>
          <legend>Personal Details</legend>
          <div class="field-group">
            <div><label for="e_id">Employee ID</label><input type="text" id="e_id" readonly></div>
            <div><label for="f_name">First Name</label><input type="text" id="f_name" readonly></div>
            <div><label for="last_name">Last Name</label><input type="text" id="last_name" readonly></div>
            <div><label for="email">Email</label><input type="email" id="email" readonly></div>
            <div><label for="phone_no">Phone No</label><input type="text" id="phone_no" readonly></div>
            <div><label for="address">Address</label><textarea id="address" readonly></textarea></div>
          </div>
        </fieldset>

        <fieldset>
          <legend>Employment Details</legend>
          <div class="field-group">
            <div><label for="role">Role</label><input type="text" id="role" readonly></div>
            <div><label for="status">Status</label><input type="text" id="status" readonly></div>
            <div><label for="bid">Branch ID</label><input type="text" id="bid" readonly></div>
            <div><label for="base_salary">Monthly Salary</label><input type="number" id="base_salary" readonly step="0.01"><div class="field-error" id="salary-error">Monthly salary must be a postive number.</div></div>
            <div id="editSalaryButtonContainer"><button id="editSalaryButton" class="edit-button">Edit Salary</button></div>
            <div><label for="hiredAt">Hired At</label><input type="text" id="hiredAt" readonly></div>
            <div><label for="resignation_date">Resignation Date</label><input type="text" id="resignation_date" readonly></div>
            <div><label for="fired_date">Fired Date</label><input type="text" id="fired_date" readonly></div>
            <div><label for="reason_for_exit">Reason for Exit</label><input type="text" id="reason_for_exit" readonly></div>
          </div>
        </fieldset>

        <fieldset>
          <legend>Bank Details</legend>
          <div class="field-group">
            <div><label for="acno">Account Number</label><input type="text" id="acno" readonly></div>
            <div><label for="ifsc">IFSC Code</label><input type="text" id="ifsc" readonly></div>
            <div><label for="bankname">Bank Name</label><input type="text" id="bankname" readonly></div>
          </div>
        </fieldset>

        <div id="error-message" style="color: red;"></div>
        <div class="success-message" id="success-message" style="display: none;"></div>

        <a href="/salesmanager/employees" class="back-button">Back to Employees</a>
        <button id="fireButton" class="fire-button">Fire Employee</button>
        <div id="fireForm" style="display:none;">
          <label for="reason_for_exit_input">Reason for Exit:</label>
          <input type="text" id="reason_for_exit_input" name="reason_for_exit" required>
          <button type="button" onclick="fireEmployee()">Submit</button>
          <button type="button" onclick="document.getElementById('fireForm').style.display='none';">Cancel</button>
        </div>
      </div>
    </div>
  </div>

  <%- include('../../partials/footer') %>

  <script>
    const form = document.getElementById('employeeForm');
    const loading = document.getElementById('loading');
    const errorMessage = document.getElementById('error-message');
    const successMessage = document.getElementById('success-message');
    let salaryInput;
    let editButton;
    let fireButton = document.getElementById('fireButton');

    // Validation Function for Salary
    function validateSalary(field, errorElement) {
      const value = parseFloat(field.value);
      if (isNaN(value) || value <=0) {
        field.classList.add('invalid');
        errorElement.style.display = 'block';
        return false;
      } else {
        field.classList.remove('invalid');
        errorElement.style.display = 'none';
        return true;
      }
    }

    async function loadEmployee() {
      try {
        const response = await fetch(`/salesmanager/employees/data/<%= e_id %>`);
        if (!response.ok) throw new Error('Failed to fetch employee');
        const employee = await response.json();

        document.getElementById('e_id').value = employee.e_id;
        document.getElementById('f_name').value = employee.f_name;
        document.getElementById('last_name').value = employee.last_name;
        document.getElementById('email').value = employee.email;
        document.getElementById('phone_no').value = employee.phone_no || 'N/A';
        document.getElementById('address').value = employee.address || 'N/A';
        document.getElementById('role').value = employee.role;
        document.getElementById('status').value = employee.status;
        document.getElementById('bid').value = employee.bid || 'N/A';
        salaryInput = document.getElementById('base_salary');
        salaryInput.value = employee.base_salary;
        document.getElementById('hiredAt').value = employee.hiredAt ? new Date(employee.hiredAt).toLocaleDateString() : 'N/A';
        document.getElementById('resignation_date').value = employee.resignation_date ? new Date(employee.resignation_date).toLocaleDateString() : 'N/A';
        document.getElementById('fired_date').value = employee.fired_date ? new Date(employee.fired_date).toLocaleDateString() : 'N/A';
        document.getElementById('reason_for_exit').value = employee.reason_for_exit || 'N/A';
        document.getElementById('acno').value = employee.acno;
        document.getElementById('ifsc').value = employee.ifsc;
        document.getElementById('bankname').value = employee.bankname;

        if (employee.status !== 'active') {
          fireButton.style.display = 'none';
          document.getElementById('editSalaryButtonContainer').style.display = 'none';
        }

        editButton = document.getElementById('editSalaryButton');
        if (editButton) {
          editButton.addEventListener('click', editSalary);
        }

        if (fireButton) {
          fireButton.addEventListener('click', () => {
            document.getElementById('fireForm').style.display = 'block';
            fireButton.style.display = 'none';
          });
        }

        loading.style.display = 'none';
        form.style.display = 'block';
      } catch (error) {
        console.error('Error loading employee:', error);
        loading.textContent = 'Error loading employee details. Please refresh.';
      }
    }

    function editSalary() {
      salaryInput.readOnly = false;
      salaryInput.focus();

      const salaryError = document.getElementById('salary-error');

      // Add event listeners for real-time validation
      const validateOnInput = () => validateSalary(salaryInput, salaryError);
      const validateOnBlur = () => validateSalary(salaryInput, salaryError);

      salaryInput.addEventListener('input', validateOnInput);
      salaryInput.addEventListener('blur', validateOnBlur);

      // Store references to remove later
      salaryInput._validateOnInput = validateOnInput;
      salaryInput._validateOnBlur = validateOnBlur;

      const existingButtonContainer = document.getElementById('salaryButtons');
      if (existingButtonContainer) {
        existingButtonContainer.remove();
      }

      const submitButton = document.createElement('button');
      submitButton.type = 'button';
      submitButton.className = 'submit-button';
      submitButton.textContent = 'Submit';
      submitButton.onclick = () => {
        if (validateSalary(salaryInput, salaryError)) {
          updateSalary();
        }
      };

      const cancelButton = document.createElement('button');
      cancelButton.type = 'button';
      cancelButton.className = 'cancel-button';
      cancelButton.textContent = 'Cancel';
      cancelButton.onclick = () => cancelEdit();

      const buttonContainer = document.createElement('div');
      buttonContainer.id = 'salaryButtons';
      buttonContainer.appendChild(submitButton);
      buttonContainer.appendChild(cancelButton);
      document.getElementById('employeeForm').appendChild(buttonContainer);

      // Initial validation
      validateOnInput();
    }

    function cancelEdit() {
      // Remove event listeners
      if (salaryInput._validateOnInput) {
        salaryInput.removeEventListener('input', salaryInput._validateOnInput);
      }
      if (salaryInput._validateOnBlur) {
        salaryInput.removeEventListener('blur', salaryInput._validateOnBlur);
      }

      salaryInput.readOnly = true;
      salaryInput.classList.remove('invalid');
      document.getElementById('salary-error').style.display = 'none';
      editButton.style.display = 'inline-block';
      const buttonContainer = document.getElementById('salaryButtons');
      if (buttonContainer) {
        buttonContainer.remove();
      }
      errorMessage.textContent = '';
      successMessage.style.display = 'none';
    }

    async function updateSalary() {
      const salaryError = document.getElementById('salary-error');
      errorMessage.textContent = '';
      successMessage.style.display = 'none';

      if (!validateSalary(salaryInput, salaryError)) {
        return;
      }

      const salaryValue = parseFloat(salaryInput.value);

      try {
        const response = await fetch(`/salesmanager/employee/update-salary/<%= e_id %>`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ base_salary: salaryValue }),
        });

        const result = await response.json();

        if (result.error) {
          errorMessage.textContent = result.error;
        } else {
          successMessage.textContent = 'Salary updated successfully';
          successMessage.style.display = 'block';
          salaryInput.readOnly = true;
          editButton.style.display = 'inline-block';
          const buttonContainer = document.getElementById('salaryButtons');
          if (buttonContainer) {
            buttonContainer.remove();
          }
        }
      } catch (error) {
        errorMessage.textContent = 'Network error: ' + error.message;
        const buttonContainer = document.getElementById('salaryButtons');
        if (buttonContainer) {
          buttonContainer.remove();
        }
        editButton.style.display = 'inline-block';
        salaryInput.readOnly = true;
      }
    }

    async function fireEmployee() {
      const reasonInput = document.getElementById('reason_for_exit_input');
      const reason = reasonInput.value.trim();
      errorMessage.textContent = '';
      successMessage.style.display = 'none';

      if (!reason) {
        errorMessage.textContent = 'Reason for exit is required';
        return;
      }

      if (!confirm('Are you sure you want to fire this employee?')) {
        return;
      }

      try {
        const response = await fetch(`/salesmanager/employee/fire/<%= e_id %>`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ reason_for_exit: reason }),
        });

        const result = await response.json();

        if (result.error) {
          errorMessage.textContent = result.error;
        } else {
          window.location.href = '/salesmanager/employees?message=Employee fired successfully';
        }
      } catch (error) {
        errorMessage.textContent = 'Network error: ' + error.message;
      }
    }

    // Initial load
    loadEmployee();
  </script>
</body>
</html>